import telebot
import wikipedia, re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from bs4 import BeautifulSoup
import logging
import requests
import config
from telegram.ext import *
from telebot import types

# Set up the logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.info('Starting Bot...')

wikipedia.set_lang("ru")
bot = telebot.TeleBot(config.TOKEN)


def clean_str(r):
    r = r.lower()
    r = [c for c in r if c in alphabet]
    return ''.join(r)


alphabet = ' 1234567890-–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é—ëqwertyuiopasdfghjklzxcvbnm?%.,()!:;'


def update():
    with open('dialogues.txt', encoding='utf-8') as f:
        content = f.read()

    blocks = content.split('\n')
    dataset = []

    for block in blocks:
        replicas = block.split('\\')[:2]
        if len(replicas) == 2:
            pair = [clean_str(replicas[0]), clean_str(replicas[1])]
            if pair[0] and pair[1]:
                dataset.append(pair)

    X_text = []
    y = []

    for question, answer in dataset[:10000]:
        X_text.append(question)
        y += [answer]

    global vectorizer
    vectorizer = CountVectorizer()
    X = vectorizer.fit_transform(X_text)

    global clf
    clf = LogisticRegression()
    clf.fit(X, y)


update()


def get_generative_replica(text):
    text_vector = vectorizer.transform([text]).toarray()[0]
    question = clf.predict([text_vector])[0]
    return question


def getwiki(s):
    try:
        ny = wikipedia.page(s)
        wikitext = ny.content[:1000]
        wikimas = wikitext.split('.')
        wikimas = wikimas[:-1]
        wikitext2 = ''
        for x in wikimas:
            if not ('==' in x):
                if (len((x.strip())) > 3):
                    wikitext2 = wikitext2 + x + '.'
            else:
                break
        wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
        wikitext2 = re.sub('\([^()]*\)', '', wikitext2)
        wikitext2 = re.sub('\{[^\{\}]*\}', '', wikitext2)
        return wikitext2
    except Exception as e:
        return '–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏üòÖ'


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton("–ß—Ç–æ —Ç—ã –æ–±–æ –º–Ω–µ –¥—É–º–∞–µ—à—å?")
    button_2 = types.KeyboardButton("–°–∫—É—á–Ω–æ üôÑ")
    markup.add(button_1, button_2)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!', reply_markup=markup)


question = ""




@bot.message_handler(content_types=['text'])
def message_reply(message):
    command = message.text.lower()
    if message.text == "–ß—Ç–æ —Ç—ã –æ–±–æ –º–Ω–µ –¥—É–º–∞–µ—à—å?":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–ï—â–µ —Ö–æ—á—É")
        button_2 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1, button_2)
        bot.send_message(message.chat.id, '–° —Ç–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É', reply_markup=markup)
    elif message.text == "–ï—â–µ —Ö–æ—á—É":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–ï—â–µ –æ–¥–∏–Ω —Ä–∞–∑–æ–∫")
        button_2 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1, button_2)
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞', reply_markup=markup)
    elif message.text == "–ï—â–µ –æ–¥–∏–Ω —Ä–∞–∑–æ–∫":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        button_2 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1, button_2)
        bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!', reply_markup=markup)
    elif message.text == "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1)
        bot.send_message(message.chat.id, '–Ø –≤ —Ç–µ–±–µ –Ω–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å!', reply_markup=markup)
    elif message.text == "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã" or message.text == "–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–ß—Ç–æ —Ç—ã –æ–±–æ –º–Ω–µ –¥—É–º–∞–µ—à—å?")
        button_2 = types.KeyboardButton("–°–∫—É—á–Ω–æ üôÑ")
        markup.add(button_1, button_2)
        bot.send_message(message.chat.id, '–¢—ã —Å–Ω–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ!', reply_markup=markup)
    elif message.text == "–°–∫—É—á–Ω–æ üôÑ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–°–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ–µ")
        button_2 = types.KeyboardButton("–ö–∏–Ω—å —Ñ–æ—Ç–æ—á–∫—É ü§©")
        button_3 = types.KeyboardButton("–°–∫–∏–Ω—å –º–Ω–µ –ø–µ—Å–µ–Ω–∫—É üòã")
        markup.add(button_1, button_2, button_3)
        bot.send_message(message.chat.id, '–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è —Ä–∞–∑–≤–µ—Å–µ–ª–∏—Ç—å? ', reply_markup=markup)
    elif message.text == "–ö–∏–Ω—å —Ñ–æ—Ç–æ—á–∫—É ü§©":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–ö–æ—Ç—è—Ç–∞")
        button_2 = types.KeyboardButton("–ú–æ—Ä–µ")
        button_3 = types.KeyboardButton("–ó–∞–∫–∞—Ç")
        button_4 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1, button_2, button_3, button_4)
        bot.send_message(message.chat.id, '–ö–∞–∫—É—é —Ö–æ—á–µ—à—å?', reply_markup=markup)
    elif message.text == "–ö–æ—Ç—è—Ç–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1)
        bot.send_message(message.chat.id, '–õ–æ–≤–∏ —Ñ–æ—Ç–æ—á–∫—É üòá', reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(config.Kittens, 'rb'), reply_markup=markup)
    elif message.text == "–ú–æ—Ä–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1)
        bot.send_message(message.chat.id, '–õ–æ–≤–∏ —Ñ–æ—Ç–æ—á–∫—É üòá', reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(config.More, 'rb'), reply_markup=markup)
    elif message.text == "–ó–∞–∫–∞—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1)
        bot.send_message(message.chat.id, '–õ–æ–≤–∏ —Ñ–æ—Ç–æ—á–∫—É üòá', reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(config.Zakat, 'rb'), reply_markup=markup)
    elif message.text == "–°–∫–∏–Ω—å –º–Ω–µ –ø–µ—Å–µ–Ω–∫—É üòã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        button_2 = types.KeyboardButton("–î—Ä—É–≥—É—é")
        markup.add(button_1, button_2)
        bot.send_message(message.chat.id, '–õ–æ–≤–∏ –ø–µ—Å–Ω—é üòá', reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(config.Music, 'rb'), reply_markup=markup)
        bot.send_audio(message.chat.id, audio=open(config.Markul, 'rb'), reply_markup=markup)
    elif message.text == "–î—Ä—É–≥—É—é":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        button_2 = types.KeyboardButton("–ï—â–µ –æ–¥–Ω—É")
        markup.add(button_1, button_2)
        bot.send_message(message.chat.id, '–õ–æ–≤–∏ –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é üòá', reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(config.Music_1, 'rb'), reply_markup=markup)
        bot.send_audio(message.chat.id, audio=open(config.Endsh, 'rb'), reply_markup=markup)
    elif message.text == "–ï—â–µ –æ–¥–Ω—É":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1)
        bot.send_message(message.chat.id, '–í–æ—Ç –µ—â–µ –æ–¥–Ω–∞', reply_markup=markup)
        bot.send_photo(message.chat.id, photo=open(config.Music_2, 'rb'), reply_markup=markup)
        bot.send_audio(message.chat.id, audio=open(config.Other, 'rb'), reply_markup=markup)
    elif message.text == "–•–æ—Ç–µ–ª –¥—Ä—É–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ü•≤":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_1 = types.KeyboardButton("–û—Ç–≤–µ—Ç –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏üòå")
        markup.add(button_1)
        bot.send_message(message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–≥–æ?üòØ", reply_markup=markup)
        bot.register_next_step_handler(message, wrong)
        button_1 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
        markup.add(button_1)

    else:
        global question
        question = command
        reply = get_generative_replica(command)
        if reply == "–æ—Ç–≤–µ—Ç –∏–∑ –≤–∏–∫–∏–ø–µ–¥–∏–∏ ":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_2 = types.KeyboardButton("–•–æ—Ç–µ–ª –¥—Ä—É–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ü•≤")
            button_1 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
            markup.add(button_1, button_2)
            bot.send_message(message.from_user.id, getwiki(command), reply_markup=markup)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_2 = types.KeyboardButton("–•–æ—Ç–µ–ª –¥—Ä—É–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ü•≤")
            button_1 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
            markup.add(button_1, button_2)
            bot.send_message(message.from_user.id, reply, reply_markup=markup)


def wrong(message):
    a = f"{question}\{message.text.lower()} \n"
    with open('dialogues.txt', "a", encoding='utf-8') as f:
        f.write(a)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton("–•–æ—á—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É üòã")
    markup.add(button_1)
    bot.send_message(message.from_user.id, "–ò—Å–ø—Ä–∞–≤–∏–ª!üòÅ", reply_markup=markup)
    update()


bot.polling(none_stop=True)


def error(update, context):
    # Logs errors
    logging.error(f'Update {update} cause error {context.error}')


if __name__ == '__main__':
    bot.infinity_polling()
